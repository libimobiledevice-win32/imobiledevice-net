variables:
  nativeBuild: 1119
  nativePipeline: 12
  runTests: true
  createDeb: true

stages:
- stage: Build
  jobs:
  - job: windows_build
    pool:
      vmImage: 'windows-2019'
    steps:
    - template: steps/download-artifacts.yml

    - script: |
        dotnet restore
        dotnet restore iMobileDevice.Generator\iMobileDevice.Generator.csproj
      displayName: Restore iMobileDevice.Generator, download binaries

    - script: |
        SET ECHO ON
        cd iMobileDevice.Generator
        dotnet run -- generate -o ..\iMobileDevice-net --source %SYSTEM_ARTIFACTSDIRECTORY%\libimobiledevice\osx-x64\include\ -i %VCPKG%\installed\x64-windows\include
        cd ..
        dotnet build imobiledevice-net\iMobileDevice-net.csproj
        dotnet pack imobiledevice-net\iMobileDevice-net.csproj -c Release
        dotnet pack iproxy\iproxy.csproj -c Release
      displayName: Generate code, build imobiledevice-net, iproxy

    - script: |
        dotnet tool install xmldocmd -g
        mkdir %SYSTEM_ARTIFACTSDIRECTORY%\md\
        xmldocmd imobiledevice-net\bin\Release\netcoreapp2.0\imobiledevice-net.dll %SYSTEM_ARTIFACTSDIRECTORY%\docs\
      displayName: Generate documentation

    - script: |
        7z x imobiledevice-net\bin\Release\imobiledevice-net.*.nupkg -ozip\

        mkdir %BUILD_ARTIFACTSTAGINGDIRECTORY%\imobiledevice-net
        mkdir %BUILD_ARTIFACTSTAGINGDIRECTORY%\binaries
        
        7z a -tzip %BUILD_ARTIFACTSTAGINGDIRECTORY%\binaries\libimobiledevice.1.2.1-r%BUILD_BUILDID%-win-x86.zip .\zip\runtimes\win-x86\native\*
        7z a -tzip %BUILD_ARTIFACTSTAGINGDIRECTORY%\binaries\libimobiledevice.1.2.1-r%BUILD_BUILDID%-win-x64.zip .\zip\runtimes\win-x64\native\*
        7z a -tzip %BUILD_ARTIFACTSTAGINGDIRECTORY%\binaries\libimobiledevice.1.2.1-r%BUILD_BUILDID%-osx-x64.zip .\zip\runtimes\osx-x64\native\*

        copy imobiledevice-net\bin\Release\imobiledevice-net.*.nupkg %BUILD_ARTIFACTSTAGINGDIRECTORY%\imobiledevice-net
        copy iproxy\bin\Release\iproxy.*.nupkg %BUILD_ARTIFACTSTAGINGDIRECTORY%\imobiledevice-net
        copy iMobileDevice.IntegrationTests.net45\Directory.Build.props %BUILD_ARTIFACTSTAGINGDIRECTORY%\imobiledevice-net
      displayName: Prepare artifacts

    - script: |
        mkdir %BUILD_ARTIFACTSTAGINGDIRECTORY%\sources
        copy %SYSTEM_ARTIFACTSDIRECTORY%\libimobiledevice\osx-x64\sources\libplist.orig.tar.gz %BUILD_ARTIFACTSTAGINGDIRECTORY%\sources\
        copy %SYSTEM_ARTIFACTSDIRECTORY%\libimobiledevice\osx-x64\sources\libusbmuxd.orig.tar.gz %BUILD_ARTIFACTSTAGINGDIRECTORY%\sources\
        copy %SYSTEM_ARTIFACTSDIRECTORY%\libimobiledevice\osx-x64\sources\libimobiledevice.orig.tar.gz %BUILD_ARTIFACTSTAGINGDIRECTORY%\sources\
        copy %SYSTEM_ARTIFACTSDIRECTORY%\libimobiledevice\osx-x64\sources\usbmuxd.orig.tar.gz %BUILD_ARTIFACTSTAGINGDIRECTORY%\sources\
        copy %SYSTEM_ARTIFACTSDIRECTORY%\libimobiledevice\osx-x64\sources\libideviceactivation.orig.tar.gz %BUILD_ARTIFACTSTAGINGDIRECTORY%\sources\
        copy %SYSTEM_ARTIFACTSDIRECTORY%\libimobiledevice\osx-x64\sources\ideviceinstaller.orig.tar.gz %BUILD_ARTIFACTSTAGINGDIRECTORY%\sources\
        copy %SYSTEM_ARTIFACTSDIRECTORY%\libimobiledevice\osx-x64\sources\libirecovery.orig.tar.gz %BUILD_ARTIFACTSTAGINGDIRECTORY%\sources\
        copy %SYSTEM_ARTIFACTSDIRECTORY%\libimobiledevice\osx-x64\sources\idevicerestore.orig.tar.gz %BUILD_ARTIFACTSTAGINGDIRECTORY%\sources\
        copy %SYSTEM_ARTIFACTSDIRECTORY%\libimobiledevice\osx-x64\sources\ios-webkit-debug-proxy.orig.tar.gz %BUILD_ARTIFACTSTAGINGDIRECTORY%\sources\

      displayName: Publish tarballs

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/imobiledevice-net'
        artifactName: imobiledevice-net
      displayName: Publish imobiledevice-net
      condition: always()
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/docs'
        artifactName: docs
      displayName: Publish docs
      condition: always()

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/binaries'
        artifactName: binaries
      displayName: Publish binaries
      condition: always()

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/sources'
        artifactName: sources
      displayName: Publish sources
      condition: always()

  - job: windows_test
    condition: and(succeeded(), eq(variables['runTests'], true))
    dependsOn: windows_build
    pool:
      vmImage: 'VS2017-Win2016'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        artifactName: imobiledevice-net

    - task: NuGetToolInstaller@0
      displayName: Install NuGet

    - script: |
        7z x %SYSTEM_ARTIFACTSDIRECTORY%\imobiledevice-net\iMobileDevice-net.*.nupkg -o%BUILD_SOURCESDIRECTORY%\zip
        dir %BUILD_SOURCESDIRECTORY%\zip\runtimes\win-x64\native
        dir %BUILD_SOURCESDIRECTORY%\zip\runtimes\win-x86\native

        %BUILD_SOURCESDIRECTORY%\zip\runtimes\win-x64\native\iproxy.exe --help
        %BUILD_SOURCESDIRECTORY%\zip\runtimes\win-x64\native\idevice_id.exe --help
        %BUILD_SOURCESDIRECTORY%\zip\runtimes\win-x64\native\ideviceactivation.exe --help
        %BUILD_SOURCESDIRECTORY%\zip\runtimes\win-x64\native\usbmuxd.exe --help
        %BUILD_SOURCESDIRECTORY%\zip\runtimes\win-x64\native\ideviceinstaller.exe --help
        %BUILD_SOURCESDIRECTORY%\zip\runtimes\win-x64\native\irecovery.exe

        %BUILD_SOURCESDIRECTORY%\zip\runtimes\win-x86\native\iproxy.exe --help
        %BUILD_SOURCESDIRECTORY%\zip\runtimes\win-x86\native\idevice_id.exe --help
        %BUILD_SOURCESDIRECTORY%\zip\runtimes\win-x86\native\ideviceactivation.exe --help
        %BUILD_SOURCESDIRECTORY%\zip\runtimes\win-x86\native\usbmuxd.exe --help
        %BUILD_SOURCESDIRECTORY%\zip\runtimes\win-x86\native\ideviceinstaller.exe --help
        %BUILD_SOURCESDIRECTORY%\zip\runtimes\win-x86\native\irecovery.exe
      displayName: Test utilities

    - script: |
        set PATH=%PATH%;%BUILD_SOURCESDIRECTORY%\zip\runtimes\win-x64\native
        dotnet test iMobileDevice.Generator.Tests\iMobileDevice.Generator.Tests.csproj
        dotnet test iMobileDevice.Tests\iMobileDevice.Tests.csproj
      displayName: Run unit tests
      continueOnError: true

    - script: |
        set PATH=%PATH%;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\
        echo "Creating NuGet repository"
        mkdir packages
        nuget init %SYSTEM_ARTIFACTSDIRECTORY%\imobiledevice-net\ packages
        cd iMobileDevice.IntegrationTests.net45

        echo "Patching the NuGet package paths"
        powershell -File PatchNuGet.ps1

        echo "Restoring dependencies"
        dir ..\packages

        nuget restore

        echo "Building integration tests"
        msbuild.exe /p:Configuration=Release /p:Platform=x86
        msbuild.exe /p:Configuration=Release /p:Platform=x64

        echo "Running integration tests"
        bin\x86\Release\iMobileDevice.IntegrationTests.net45.exe
        bin\x64\Release\iMobileDevice.IntegrationTests.net45.exe
        cd ..
      displayName: Run integration tests (.NET 4.5)
      continueOnError: true

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.SourcesDirectory)/iMobileDevice.IntegrationTests.net45/bin'
        artifactName: net45-output
      displayName: Publish .NET 4.5 output
      condition: always()

    - script: |
        copy %SYSTEM_ARTIFACTSDIRECTORY%\imobiledevice-net\*.props iMobileDevice.IntegrationTests.netcoreapp30\
        cd iMobileDevice.IntegrationTests.netcoreapp30
        dotnet run
        dotnet publish -r win7-x64 -c Release
        dir bin\Release\netcoreapp3.0\win7-x64\publish\
        bin\Release\netcoreapp3.0\win7-x64\publish\iMobileDevice.IntegrationTests.netcoreapp30.exe
        dotnet publish -r win7-x86 -c Release
        dir bin\Release\netcoreapp3.0\win7-x86\publish\
        bin\Release\netcoreapp3.0\win7-x86\publish\iMobileDevice.IntegrationTests.netcoreapp30.exe
      displayName: Run integration tests (.NET Core 3.0)
      continueOnError: true

  # This tests deploying the native assets using NuGet packages (as part of the runtime/)
  # archives. It's the way we deploy on Windows and macOS, because the OS ABI is stable.
  # On Linux (CentOS/Ubuntu), we prefer to use package native packages/package repositories
  # instead.
  - job: osx_test
    condition: and(succeeded(), eq(variables['runTests'], true))
    dependsOn: windows_build
    variables:
      RID: osx-x64
    pool:
      vmImage: 'macOS-10.14'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 3.0.100
    - template: steps/unix.yml

  - job: linux_test
    condition: and(succeeded(), eq(variables['runTests'], true))
    dependsOn: windows_build
    variables:
      RID: ubuntu.16.04-x64
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - template: steps/unix.yml

  - job: deb
    condition: and(succeeded(), eq(variables['createDeb'], true))
    dependsOn: windows_build
    strategy:
      maxParallel: 4
      matrix:
        xenial:
          DIST: xenial
          imageName: ubuntu:16.04
        bionic:
          DIST: bionic
          imageName: ubuntu:18.04
        focal:
          DIST: focal
          imageName: ubuntu:20.04
        groovy:
          DIST: groovy
          imageName: ubuntu:20.10
    pool:
      vmImage: 'ubuntu-18.04'
    container:
      image: $(imageName)
      options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
    steps:
    - script: |
        /tmp/docker exec -t -u 0 ci-container \
        sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
      displayName: Set up sudo
    - template: steps/create-deb.yml

  # This tests deploying the native assets using Debian packages (.deb files). This now works
  # on .NET Core 3.0, as we can use the NativeLibrary mechanism to probe for the native libraries
  # using different names
  - job: deb_test
    condition: and(succeeded(), eq(variables['runTests'], true))
    dependsOn: deb
    strategy:
      maxParallel: 2
      matrix:
        bionic:
          DIST: bionic
          imageName: mcr.microsoft.com/dotnet/core/sdk:3.0-bionic
        focal:
          DIST: focal
          imageName: mcr.microsoft.com/dotnet/core/sdk:3.1-focal
    pool:
      vmImage: 'ubuntu-18.04'
    container:
      image: $(imageName)
      options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
    steps:
    - script: |
        /tmp/docker exec -t -u 0 ci-container \
        sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
      displayName: Set up sudo
    - template: steps/test-deb.yml

  - job: rpm_test
    condition: and(succeeded(), eq(variables['runTests'], true))
    dependsOn: windows_build
    strategy:
      maxParallel: 2
      matrix:
        centos_7:
          DIST: CentOS_7
          VERSION: 7
          imageName: centos:7
    pool:
      vmImage: 'ubuntu-18.04'
    container:
      image: $(imageName)
      options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
    steps:
    - script: |
        /tmp/docker exec -t -u 0 ci-container \
        sh -c "yum install -y sudo"
      displayName: Set up sudo
    - template: steps/test-rpm.yml

- stage: Deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job: github_deploy
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - template: steps/deploy-github.yml

  - job: nuget_deploy
    dependsOn: github_deploy
    pool:
      vmImage: 'VS2017-Win2016'
    steps:
    - template: steps/deploy-nuget.yml

  - job: docker_deploy
    dependsOn: github_deploy
    strategy:
      maxParallel: 5
      matrix:
        xenial:
          SUFFIX:
          NAME: xenial
        bionic:
          SUFFIX: -bionic
          NAME: bionic
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - template: steps/deploy-docker.yml

  - job: ppa_deploy
    dependsOn: github_deploy
    strategy:
      maxParallel: 4
      matrix:
        xenial:
          DIST: xenial
        bionic:
          DIST: bionic
        focal:
          DIST: focal
        groovy:
          DIST: groovy
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - template: steps/deploy-ppa.yml

  - job: osc_deploy
    dependsOn: github_deploy
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - template: steps/deploy-osc.yml
